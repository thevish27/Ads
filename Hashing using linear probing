#include <iostream>
#include <string>
#include <iomanip> // Include iomanip for setw
using namespace std;

#define MAX 10

class Hash {
public:
    struct medicalrecord {
        int pat_id;
        string pat_name;
        string pat_diagnosis;
        string pat_treat;
    };

    medicalrecord records[MAX][2];

    Hash() {
        for (int i = 0; i < MAX; i++) {
            records[i][0].pat_id = -1;
            records[i][1].pat_id = -1;
        }
    }

   void insert() {
    int ch;
    int pat_id;
    string pat_name;
    string pat_diagnosis;
    string pat_treat;
    do {
        cout << "Enter the id of the patient: ";
        cin >> pat_id;
        cout << "Enter the name of the patient: ";
        cin >> pat_name;
        cout << "Enter the diagnosis plan of the patient: ";
        cin >> pat_diagnosis;
        cout << "Enter the treatment to be given to the patient: ";
        cin >> pat_treat;
        int s = pat_id % MAX;
        if (records[s][0].pat_id == -1) {
            records[s][0] = { pat_id, pat_name, pat_diagnosis, pat_treat };
        } else {
            cout << "Collision occurs\n";
            int t = (s + 1) % MAX; // Start from next slot
            while (t != s && records[t][0].pat_id != -1) {
                t = (t + 1) % MAX; // Move to the next slot circularly
            }
            if (t == s) {
                cout << "Overflow. Cannot insert more records." << endl;
            } else {
                records[s][1].pat_id = t; // Store the location of t in the second slot of collision pair
                records[t][0] = { pat_id, pat_name, pat_diagnosis, pat_treat };
            }
        }
        cout << "\nDo you want to insert more (1/0)? ";
        cin >> ch;
    } while (ch == 1);
}

    void display() {
       // cout << setw(10) << "Patient ID" << setw(20) << "Patient Name" << setw(30) << "Patient Diagnosis" << setw(30) << "Patient Treatment" << endl;
        for (int i = 0; i < MAX; i++) {
        	cout<<"\nIndex"<<i<<":";
            for (int j = 0; j < 2; j++) {
                if (records[i][j].pat_id != -1) {
                    displayrecord(records[i][j]);
                }
            }
        }
    }

    void displayrecord(const medicalrecord& rec) {
    	 cout << setw(10) << "Patient ID" << setw(20) << "Patient Name" << setw(30) << "Patient Diagnosis" << setw(30) << "Patient Treatment" << endl;
        cout << setw(10) << rec.pat_id << setw(20) << rec.pat_name << setw(30) << rec.pat_diagnosis << setw(30) << rec.pat_treat << endl;
    }

void search() {
    int pat_id;
    cout << "\nEnter the patient id to be searched: ";
    cin >> pat_id;
    int s = pat_id % MAX;
    if (records[s][0].pat_id == pat_id) {
        displayrecord(records[s][0]);
        return;
    } else if (records[s][1].pat_id == pat_id) {
        displayrecord(records[s][1]);
        return;
    } else if (records[s][1].pat_id != -1 && records[s][1].pat_id != s) {
        // Check if there is a record stored in the second slot after collision
        int t = records[s][1].pat_id;
        if (records[t][0].pat_id == pat_id) {
            displayrecord(records[t][0]);
            return;
        }
    }
    cout << "\nMedical record for " << pat_id << " not found." << endl;
}
void update() {
    int pat_id;
    cout << "\nEnter the patient id to be updated: ";
    cin >> pat_id;
    int s = pat_id % MAX;
    if (records[s][0].pat_id == pat_id) {
        cout << "Enter the new name of the patient: ";
        cin >> records[s][0].pat_name;
        cout << "Enter the new diagnosis plan of the patient: ";
        cin >> records[s][0].pat_diagnosis;
        cout << "Enter the new treatment to be given to the patient: ";
        cin >> records[s][0].pat_treat;
        cout << "\nRecord updated successfully." << endl;
    } else if (records[s][1].pat_id == pat_id) {
        cout << "Enter the new name of the patient: ";
        cin >> records[s][1].pat_name;
        cout << "Enter the new diagnosis plan of the patient: ";
        cin >> records[s][1].pat_diagnosis;
        cout << "Enter the new treatment to be given to the patient: ";
        cin >> records[s][1].pat_treat;
        cout << "\nRecord updated successfully." << endl;
    } else if (records[s][1].pat_id != -1 && records[s][1].pat_id != s) {
        // Check if there is a record stored in the second slot after collision
        int t = records[s][1].pat_id;
        if (records[t][0].pat_id == pat_id) {
            cout << "Enter the new name of the patient: ";
            cin >> records[t][0].pat_name;
            cout << "Enter the new diagnosis plan of the patient: ";
            cin >> records[t][0].pat_diagnosis;
            cout << "Enter the new treatment to be given to the patient: ";
            cin >> records[t][0].pat_treat;
            cout << "\nRecord updated successfully." << endl;
            return;
        }
    }
    cout << "\nMedical record for " << pat_id << " not found." << endl;
}
void remove() {
    int pat_id;
    cout << "\nEnter the patient id to be deleted: ";
    cin >> pat_id;
    int s = pat_id % MAX;
    if (records[s][0].pat_id == pat_id) {
        records[s][0].pat_id = -1; // Marking the record as deleted
        cout << "\nRecord for patient with ID " << pat_id << " deleted successfully." << endl;
        return;
    } else if (records[s][1].pat_id == pat_id) {
        records[s][1].pat_id = -1; // Marking the record as deleted
        cout << "\nRecord for patient with ID " << pat_id << " deleted successfully." << endl;
        return;
    } else if (records[s][1].pat_id != -1 && records[s][1].pat_id != s) {
        // Check if there is a record stored in the second slot after collision
        int t = records[s][1].pat_id;
        if (records[t][0].pat_id == pat_id) {
            records[t][0].pat_id = -1; // Marking the record as deleted
            cout << "\nRecord for patient with ID " << pat_id << " deleted successfully." << endl;
            return;
        }
    }
    cout << "\nMedical record for patient with ID " << pat_id << " not found." << endl;
}

  
};

int main() {
    Hash h;
    int choice, ch;
    do {
        cout << "\nMenu";
        cout << "\n1.Insert\n2.Display\n3.Search\n4.Update\n5.Delete\n6.Exit";
        cout << "\nEnter your choice: ";
        cin >> choice;
        switch (choice) {
            case 1:
                h.insert();
                break;
            case 2:
                h.display();
                break;
            case 3:
                h.search();
                break;
            case 4:
            	h.update();
            	break;
            case 5:
            	h.remove();
            	break;
            case 6:
                exit(0);
            
        }
        cout << "\nDo you want to continue (1/0)? ";
        cin >> ch;
    } while (ch == 1);
    return 0;
}
